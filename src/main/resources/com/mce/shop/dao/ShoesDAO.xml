<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.mce.shop.dao.ShoesDAO">
  <resultMap id="BaseResultMap" type="com.mce.shop.entity.Shoes">
    <id column="shoes_id" jdbcType="INTEGER" property="shoesId" />
    <result column="shoes_number" jdbcType="INTEGER" property="shoesNumber" />
    <result column="shoes_name" jdbcType="VARCHAR" property="shoesName" />
    <result column="shoes_price_sale" jdbcType="REAL" property="shoesPriceSale" />
    <result column="shoes_discount" jdbcType="REAL" property="shoesDiscount" />
    <result column="shoes_desc" jdbcType="VARCHAR" property="shoesDesc" />
    <result column="shoes_onsale_time" jdbcType="DATE" property="shoesOnsaleTime" />
    <result column="shoes_offsale_time" jdbcType="DATE" property="shoesOffsaleTime" />
    <result column="shoes_sale_count" jdbcType="INTEGER" property="shoesSaleCount" />
    <result column="shoes_gender" jdbcType="TINYINT" property="shoesGender" />
    <result column="shoes_status" jdbcType="TINYINT" property="shoesStatus" />
    <result column="category_id" jdbcType="INTEGER" property="categoryId" />
    <collection property="shoesDetail" ofType="com.mce.shop.entity.ShoesDetail" >
      <result column="shoes_detail_id" property="shoesDetailId"></result>
      <result column="shoes_id" property="shoesId"></result>
      <association property="shoesSize" javaType="com.mce.shop.entity.ShoesSize">
        <id column="shoes_size_id" property="shoesSizeId"></id>
        <id column="shoes_size" property="shoesSize"></id>
      </association>
    </collection>
  </resultMap>

  <sql id="Base_Column_List">
    shoes_id, shoes_number, shoes_name, shoes_price_sale, shoes_discount, shoes_desc, 
    shoes_onsale_time, shoes_offsale_time, shoes_sale_count, shoes_gender, shoes_status, 
    category_id
  </sql>
  <!-- 根据鞋子的ID查询鞋子 -->
  <select id="queryById" resultMap="BaseResultMap">
    select shoes_id, shoes_number, shoes_name, shoes_price_sale, shoes_discount, shoes_desc,
    shoes_onsale_time, shoes_offsale_time, shoes_sale_count, shoes_gender, shoes_status,
    category_id
    from shoes where shoes_id = #{shoesId}
  </select>
  <!--返回所有鞋子,默认按照鞋的销量降序排序-->
  <select id="queryAll"  resultMap="BaseResultMap">
    select shoes_id, shoes_number, shoes_name, shoes_price_sale, shoes_discount, shoes_desc,
    shoes_onsale_time, shoes_offsale_time, shoes_sale_count, shoes_gender, shoes_status,
    category_id
    from shoes
    order by shoes_sale_count
  </select>
  <!--根据指定查询的鞋子名称 返回鞋子名称中包含指定字符串的鞋子列表-->
  <select id="queryByName" parameterType="java.lang.String" resultMap="BaseResultMap">
    select shoes_id, shoes_number, shoes_name, shoes_price_sale, shoes_discount, shoes_desc,
    shoes_onsale_time, shoes_offsale_time, shoes_sale_count, shoes_gender, shoes_status,
    category_id
    from shoes
    where shoes_name like CONCAT('%',#{username},'%')

  </select>
  <!--指定查询的鞋子适用的性别，0 表示男性，1 表示女性 @return 返回指定性别的鞋子对象列表-->
  <select id="queryByGender" parameterType="java.lang.Byte" resultMap="BaseResultMap">
    select shoes_id, shoes_number, shoes_name, shoes_price_sale, shoes_discount, shoes_desc,
    shoes_onsale_time, shoes_offsale_time, shoes_sale_count, shoes_gender, shoes_status,
    category_id
    from shoes
    where shoes_gender=#{shoesGender}
  </select>
   <!--指定查询的鞋子码数  返回指定码数的鞋子对象列表-->
  <select id="queryBySize" parameterType="java.lang.Float" resultMap="BaseResultMap">
    select s.shoes_id, shoes_number, shoes_name, shoes_price_sale, shoes_discount, shoes_desc,
    shoes_onsale_time, shoes_offsale_time, s.shoes_sale_count, shoes_gender, shoes_status,
    category_id
    from shoes s,shoes_detail d,shoes_size si
    where s.shoes_id = d.shoes_id and d.shoes_size_id = si.shoes_size_id and shoes_size=#{shoesSize}
  </select>
  <!--指定查询的鞋子的最小价格，若最小价格为null,则只按最大价格查询
   指定查询的鞋子的最大价格，若大小价格为null,则只按最小价格查询
   返回指定价格范围内的鞋子对象列表-->
  <select id="queryByPrice"  resultMap="BaseResultMap">
    select shoes_id, shoes_number, shoes_name, shoes_price_sale, shoes_discount, shoes_desc,
    shoes_onsale_time, shoes_offsale_time, shoes_sale_count, shoes_gender, shoes_status,
    category_id
    from shoes
    where shoes_price_sale BETWEEN #{minPrice} and #{maxPrice}
  </select>
  <!--指定的鞋子类别ID  返回指定类别中的所有鞋子对象列表-->
  <select id="queryByCategory" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    select shoes_id, shoes_number, shoes_name, shoes_price_sale, shoes_discount, shoes_desc,
    shoes_onsale_time, shoes_offsale_time, shoes_sale_count, shoes_gender, shoes_status,
    category_id
    from shoes
    where category_id=#{categoryId}
  </select>

  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from shoes
    where shoes_id = #{shoesId,jdbcType=INTEGER}
  </delete>
  <insert id="insert" parameterType="com.mce.shop.entity.Shoes">
    insert into shoes (shoes_id, shoes_number, shoes_name, 
      shoes_price_sale, shoes_discount, shoes_desc, 
      shoes_onsale_time, shoes_offsale_time, shoes_sale_count, 
      shoes_gender, shoes_status, category_id
      )
    values (#{shoesId,jdbcType=INTEGER}, #{shoesNumber,jdbcType=INTEGER}, #{shoesName,jdbcType=VARCHAR}, 
      #{shoesPriceSale,jdbcType=REAL}, #{shoesDiscount,jdbcType=REAL}, #{shoesDesc,jdbcType=VARCHAR}, 
      #{shoesOnsaleTime,jdbcType=DATE}, #{shoesOffsaleTime,jdbcType=DATE}, #{shoesSaleCount,jdbcType=INTEGER}, 
      #{shoesGender,jdbcType=TINYINT}, #{shoesStatus,jdbcType=TINYINT}, #{categoryId,jdbcType=INTEGER}
      )
  </insert>
  <insert id="insertSelective" parameterType="com.mce.shop.entity.Shoes">
    insert into shoes
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="shoesId != null">
        shoes_id,
      </if>
      <if test="shoesNumber != null">
        shoes_number,
      </if>
      <if test="shoesName != null">
        shoes_name,
      </if>
      <if test="shoesPriceSale != null">
        shoes_price_sale,
      </if>
      <if test="shoesDiscount != null">
        shoes_discount,
      </if>
      <if test="shoesDesc != null">
        shoes_desc,
      </if>
      <if test="shoesOnsaleTime != null">
        shoes_onsale_time,
      </if>
      <if test="shoesOffsaleTime != null">
        shoes_offsale_time,
      </if>
      <if test="shoesSaleCount != null">
        shoes_sale_count,
      </if>
      <if test="shoesGender != null">
        shoes_gender,
      </if>
      <if test="shoesStatus != null">
        shoes_status,
      </if>
      <if test="categoryId != null">
        category_id,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="shoesId != null">
        #{shoesId,jdbcType=INTEGER},
      </if>
      <if test="shoesNumber != null">
        #{shoesNumber,jdbcType=INTEGER},
      </if>
      <if test="shoesName != null">
        #{shoesName,jdbcType=VARCHAR},
      </if>
      <if test="shoesPriceSale != null">
        #{shoesPriceSale,jdbcType=REAL},
      </if>
      <if test="shoesDiscount != null">
        #{shoesDiscount,jdbcType=REAL},
      </if>
      <if test="shoesDesc != null">
        #{shoesDesc,jdbcType=VARCHAR},
      </if>
      <if test="shoesOnsaleTime != null">
        #{shoesOnsaleTime,jdbcType=DATE},
      </if>
      <if test="shoesOffsaleTime != null">
        #{shoesOffsaleTime,jdbcType=DATE},
      </if>
      <if test="shoesSaleCount != null">
        #{shoesSaleCount,jdbcType=INTEGER},
      </if>
      <if test="shoesGender != null">
        #{shoesGender,jdbcType=TINYINT},
      </if>
      <if test="shoesStatus != null">
        #{shoesStatus,jdbcType=TINYINT},
      </if>
      <if test="categoryId != null">
        #{categoryId,jdbcType=INTEGER},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="com.mce.shop.entity.Shoes">
    update shoes
    <set>
      <if test="shoesNumber != null">
        shoes_number = #{shoesNumber,jdbcType=INTEGER},
      </if>
      <if test="shoesName != null">
        shoes_name = #{shoesName,jdbcType=VARCHAR},
      </if>
      <if test="shoesPriceSale != null">
        shoes_price_sale = #{shoesPriceSale,jdbcType=REAL},
      </if>
      <if test="shoesDiscount != null">
        shoes_discount = #{shoesDiscount,jdbcType=REAL},
      </if>
      <if test="shoesDesc != null">
        shoes_desc = #{shoesDesc,jdbcType=VARCHAR},
      </if>
      <if test="shoesOnsaleTime != null">
        shoes_onsale_time = #{shoesOnsaleTime,jdbcType=DATE},
      </if>
      <if test="shoesOffsaleTime != null">
        shoes_offsale_time = #{shoesOffsaleTime,jdbcType=DATE},
      </if>
      <if test="shoesSaleCount != null">
        shoes_sale_count = #{shoesSaleCount,jdbcType=INTEGER},
      </if>
      <if test="shoesGender != null">
        shoes_gender = #{shoesGender,jdbcType=TINYINT},
      </if>
      <if test="shoesStatus != null">
        shoes_status = #{shoesStatus,jdbcType=TINYINT},
      </if>
      <if test="categoryId != null">
        category_id = #{categoryId,jdbcType=INTEGER},
      </if>
    </set>
    where shoes_id = #{shoesId,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.mce.shop.entity.Shoes">
    update shoes
    set shoes_number = #{shoesNumber,jdbcType=INTEGER},
      shoes_name = #{shoesName,jdbcType=VARCHAR},
      shoes_price_sale = #{shoesPriceSale,jdbcType=REAL},
      shoes_discount = #{shoesDiscount,jdbcType=REAL},
      shoes_desc = #{shoesDesc,jdbcType=VARCHAR},
      shoes_onsale_time = #{shoesOnsaleTime,jdbcType=DATE},
      shoes_offsale_time = #{shoesOffsaleTime,jdbcType=DATE},
      shoes_sale_count = #{shoesSaleCount,jdbcType=INTEGER},
      shoes_gender = #{shoesGender,jdbcType=TINYINT},
      shoes_status = #{shoesStatus,jdbcType=TINYINT},
      category_id = #{categoryId,jdbcType=INTEGER}
    where shoes_id = #{shoesId,jdbcType=INTEGER}
  </update>

  <!-- 分页查询 -->
  <select id="queryAllByPage" parameterType="com.mce.shop.util.PageModel" resultMap="BaseResultMap">
    select shoes_id, shoes_name, shoes_price_sale, shoes_desc, shoes_sale_count, shoes_gender, shoes_status
    from shoes
    limit #{startRecord} ,#{pageSize}
  </select>

  <!-- 获得总记录数 -->
  <select id="getCount" resultType="Integer">
    select count(shoes_id)
    from shoes
  </select>
</mapper>